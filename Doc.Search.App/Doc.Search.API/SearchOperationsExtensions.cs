// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Doc.Search.App;
using Doc.Search.App.Models;
using Microsoft.Rest;

namespace Doc.Search.App
{
    public static partial class SearchOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Doc.Search.App.ISearchOperations.
        /// </param>
        /// <param name='name'>
        /// Required.
        /// </param>
        public static IList<DocumentProperties> SearchbyName(this ISearchOperations operations, string name)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISearchOperations)s).SearchbyNameAsync(name);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Doc.Search.App.ISearchOperations.
        /// </param>
        /// <param name='name'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<DocumentProperties>> SearchbyNameAsync(this ISearchOperations operations, string name, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Doc.Search.App.Models.DocumentProperties>> result = await operations.SearchbyNameWithOperationResponseAsync(name, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }

        /// <param name='operations'>
        /// Reference to the Doc.Search.App.ISearchOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='viewsCounter'>
        /// Required.
        /// </param>
        public static Task<string> Update(this ISearchOperations operations, string id, int viewsCounter)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((ISearchOperations)s).UpdateAsync(id, viewsCounter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap();
        }

        /// <param name='operations'>
        /// Reference to the Doc.Search.App.ISearchOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='viewsCounter'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> UpdateAsync(this ISearchOperations operations, string id, int viewsCounter, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.UpdateWithOperationResponseAsync(id, viewsCounter, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
